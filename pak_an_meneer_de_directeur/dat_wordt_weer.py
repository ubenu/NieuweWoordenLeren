'''
Created on 22 Oct 2017

@author: marietje
'''

from PyQt5 import QtCore as qt
from PyQt5 import QtWidgets as widgets
from PyQt5 import QtGui as gui

import pandas as pd
#import numpy as np, scipy as sp


from PyQt5.uic import loadUiType
Ui_MainWindow, QMainWindow = loadUiType('..\\Resources\\UI\\nwl.ui')

# Original:
# To avoid using .ui file (from QtDesigner) and loadUIType, 
# created a python-version of the .ui file using pyuic5 from command line
# Here: pyuic5 blits.ui -o blits_ui.py
# Also: cannot (easily) use .qrc file, so need to create _rc.py file
# with icon definitions: pyrcc5 -o blits_rc.py blits.qrc
# Then import .py package, as below.
# (QMainWindow is a QtWidget; UI_MainWindow is generated by the converted .ui)

class Main(QMainWindow, Ui_MainWindow):
    levels = ['ongezien', 'gezien', 'zilver', 'goud','platina',]
    certainty = ['Niet zeker', 'Behoorlijk zeker', 'Helemaal zeker']
    n_minimum_words_in_current_list = 20
    ui_states = ['start', 'ready', 'word set', 'played']
                   
    def __init__(self, ):
        super(Main, self).__init__()
        self.setupUi(self)
        
        self.action_open_word_list.triggered.connect(self.on_open_word_list)
        self.action_draw.triggered.connect(self.draw)
        self.action_play.triggered.connect(self.play)
        self.btn_draw.setDefaultAction(self.action_draw)
        self.btn_play.setDefaultAction(self.action_play)
        self.chk_de.stateChanged.connect(self.on_de_changed)
        self.chk_het.stateChanged.connect(self.on_het_changed)

        self.file_name = None
        self.full_word_list = None
        self.current_word = None
        self.current_word_list = None
        self.words_in_levels = {}
        self.selected_article = ''
        self.selected_certainty = self.certainty[0]
        self.ui_state = self.ui_states.index('start')
        self.update_ui()

    def on_open_word_list(self):
        file_path = widgets.QFileDialog.getOpenFileName(self, 
        "Open woordenlijst", "", "CSV data files (*.csv);;All files (*.*)")[0]
        if file_path:
            self.file_path = file_path
            info = qt.QFileInfo(file_path)
            self.file_name = info.fileName()
            self.import_word_list(file_path)
            self.ui_state = self.ui_states.index('ready')
            self.update_ui()
            
    def import_word_list(self, file_path):
        self.full_word_list = pd.read_csv(file_path)
        status = self.full_word_list['Status']
        self.words_in_levels = {}
        self.words_in_levels[self.levels[0]] = self.full_word_list[status == self.levels[0]]
        self.words_in_levels[self.levels[1]] = self.full_word_list[status == self.levels[1]]
        self.words_in_levels[self.levels[2]] = self.full_word_list[status == self.levels[2]]
        self.words_in_levels[self.levels[3]] = self.full_word_list[status == self.levels[3]]
        self.words_in_levels[self.levels[4]] = self.full_word_list[status == self.levels[4]]
        self.current_word_list = self.words_in_levels[self.levels[1]]
        for lvl in self.levels[2:len(self.levels)]:
            self.current_word_list = self.current_word_list.append(self.words_in_levels[lvl])
        n_new = min(len(self.words_in_levels[self.levels[0]]), len(self.words_in_levels[self.levels[3]]))
        new_words = self.words_in_levels[self.levels[0]].sample(n=n_new)
        self.current_word_list = self.current_word_list.append(new_words).sort_index()
        
    def draw(self):
        self.current_word = self.current_word_list.sample()
        self.ui_state = self.ui_states.index('word set')
        self.update_ui()
        
    def play(self):
        self.ui_state = self.ui_states.index('played')
        self.update_ui()
        
    def update_ui(self):
        if self.ui_states[self.ui_state] == 'start':
            self.btn_draw.setEnabled(False)
            self.btn_play.setEnabled(False)
            self.txt_word.setEnabled(False)
        if self.ui_states[self.ui_state] == 'ready':
            self.btn_draw.setEnabled(True)
            self.btn_play.setEnabled(False)
            self.txt_word.setEnabled(False)
        if self.ui_states[self.ui_state] == 'word set':
            self.btn_draw.setEnabled(False)
            self.btn_play.setEnabled(True)
            self.txt_word.setEnabled(True)
            self.txt_word.setText(self.current_word.Woord.iloc[0])
            self.chk_de.setChecked(qt.Qt.Unchecked)
            self.chk_het.setChecked(qt.Qt.Unchecked)
            w_correct = self.tbl_word_score.item(0, 0)
            w_wrong = self.tbl_word_score.item(1, 0)
            w_correct.setCheckState(qt.Qt.Unchecked)
            w_wrong.setCheckState(qt.Qt.Unchecked)
        if self.ui_states[self.ui_state] == 'played':
            self.btn_draw.setEnabled(True)
            self.btn_play.setEnabled(False)
            self.txt_word.setEnabled(True)
            w_correct = self.tbl_word_score.item(0, 0)
            w_wrong = self.tbl_word_score.item(1, 0)
            w_correct.setCheckState(qt.Qt.Unchecked)
            w_wrong.setCheckState(qt.Qt.Checked)
            if self.selected_article.lower() == self.current_word.Lidwoord.iloc[0].lower():
                w_correct.setCheckState(qt.Qt.Checked)
                w_wrong.setCheckState(qt.Qt.Unchecked)
            
            
            
    def on_de_changed(self):
        self.selected_article = ''
        if self.chk_de.isChecked():
            self.chk_het.setChecked(qt.Qt.Unchecked)
            self.selected_article = 'de'
            
    def on_het_changed(self):
        self.selected_article = ''
        if self.chk_het.isChecked():
            self.chk_de.setChecked(qt.Qt.Unchecked)
            self.selected_article = 'het'


# Standard main loop code
if __name__ == '__main__':
    import sys
    app = widgets.QApplication(sys.argv)
    main = Main()
    main.show()
    sys.exit(app.exec_())